#!/usr/bin/env bash
#
# Created:         Di 2020-05-05 19:31:11 CEST
# Last Modified:   So 2021-04-04 23:36:03 CEST
#
# backslide:
#   This script will change the current desktop wallpaper.

# Help text
usage() {
cat << EOF

Usage: backslide [options] <folder>

This script will change the current desktop wallpaper with
a random selection from the given folder.

OPTIONS:
   -d TYPE  Force desktop environment [GNOME|MATE|XFCE]
   -R       Recurse into subdirectories
   -r       Selects a random wallpaper files
   -l       Selects latest wallpaper file
   -q       Quiet mode
   -h       Show this message
EOF
}

# Initialization
DESKTOP=
RND=0
LATEST=0
QUIET=0
MAXDEPTH='-maxdepth 1'

# Process options
while getopts d:Rrlqh OPTION
do
    case "${OPTION}"
    in
        d)  DESKTOP=${OPTARG}
            ;;
        R)  MAXDEPTH=
            ;;
        r)  RND=1
            ;;
        l)  LATEST=1
            ;;
        h)  usage
            exit 0
            ;;
        q)  QUIET=1
            ;;
        \?) usage
            exit 1
            ;;
    esac
done

# Skip options and shift index
shift $((OPTIND-1))

#
if [ "${RND}" -eq 1 ] && [ "${LATEST}" -eq 1 ]
then
    echo "Random and latest selection are mutually exclusive"
    exit 2
fi

# Initialize list
LIST=()

# Loop over arguments
for dir in "$@"
do
    # Add current working directory unless argument is absolute path
    [[ "$dir" != /* ]] && dir="$(pwd)/$dir"

    # Check if variable holds a valid directory
    if [ ! -d "${dir}" ]
    then
        echo "Skipping ${dir}, not a valid directory"
        continue
    fi

    # Search for JPG and PNG image files (bash v4.3 and earlier)
    while IFS=  read -r -d $'\0'
    do
        LIST+=("$REPLY")
    done < <( find "${dir}" ${MAXDEPTH} -type f \( -iname \*.jpg -o -iname \*.png \) -print0 )

    # Search for JPG and PNG image files (bash v4.4 and later)
    # readarray -d '' LIST < <( find ${dir} $MAXDEPTH -type f \( -iname \*.jpg -o \
    #                                                            -iname \*.png \) -print0 )

done

# Compute the number of images
COUNT=${#LIST[@]}

# Exit if there are no images
if [ "${COUNT}" -eq 0 ]
then
    echo "No images found"
    exit 3
fi

# Make selection (arg #1 is filepath to current wallpaper)
function make_selection {

    # Determine ID of current wallpaper
    CURSEL=-1
    for i in "${!LIST[@]}"
    do
        if [[ "${LIST[$i]}" == "$1" ]]
        then
            CURSEL=$i
            break
        fi
    done

    # Initialize new ID
    TRYSEL=$CURSEL

    # Check selection mode
    if [ "${LATEST}" -eq 1 ]
    then

        # Get latest image
        TRYTIME=0
        for i in "${!LIST[@]}"
        do
            if [ $(stat -c %Y "${LIST[$i]}") -gt "${TRYTIME}" ]
            then
                TRYSEL=$i
                TRYTIME=$(stat -c %Y "${LIST[$i]}")
            fi
        done

    elif [ "${RND}" -eq 0 ]
    then

        # Proceed to next image in list
        TRYSEL=$(( TRYSEL + 1 ))
        [[ $TRYSEL -eq ${COUNT} ]] && TRYSEL=0

    # Random select if more than 1 item in list
    elif [ "${COUNT}" -gt 1 ]
    then

        # Loop until new ID is found
        while [ ${TRYSEL} -eq "${CURSEL}" ]
        do
            TRYSEL=$(( RANDOM % COUNT ))
        done
    fi

    #
    [ "${QUIET}" -eq 0 ] && echo Selection: "${LIST[$TRYSEL]}"
}

# Set DBUS session (arg #1 is name of desktop session)
function set_dbus_session {

    # Argument #1 is name of session to look for
    PID=$(pgrep "$1" -u $UID | tail -n1)
    if [ -n "${PID}" ]
    then
        DBUS_SESSION_BUS_ADDRESS=$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/"$PID"/environ | tr -d '\0' | cut -d= -f2-)
        export DBUS_SESSION_BUS_ADDRESS
    else
        echo "Failed to resolve $1 of user $UID, probably not logged in"
        exit 4
    fi

}

# Check if option for desktop environment is defined
if [ -z "${DESKTOP}" ]
then

    # Grep known desktops
    if [[ ${XDG_CURRENT_DESKTOP} =~ ^GNOME|MATE|XFCE$ ]]
    then

        # Looks like Gnome, Unity or Cinnamon
        DESKTOP="${XDG_CURRENT_DESKTOP}"

    else

        # Issue error message and display debugging info
        echo "Failed to auto-determine desktop environment"
        echo
        echo "XDG_CURRENT_DESKTOP = '${XDG_CURRENT_DESKTOP}'"
        echo "DESKTOP_SERSSION = '${DESKTOP_SESSION}'"
        echo "MENU_PREFIX = '${XDG_MENU_PREFIX}'"

        exit 5

    fi
fi

# Check variable XDG_CURRENT_DESKTOP
if echo "${DESKTOP}" | grep -iqF gnome
then

    # Set DBUS session
    set_dbus_session gnome-session

    # Fetch current wallpaper
    CURRENT=$(gsettings get org.gnome.desktop.background picture-uri)
    CURRENT=${CURRENT#"'file://"}
    CURRENT=${CURRENT%"'"}

    # Set new index
    make_selection "${CURRENT}"

    # Image loading
    gsettings set org.gnome.desktop.background picture-uri "file://${LIST[${TRYSEL}]}"

elif echo "${DESKTOP}" | grep -iqF mate
then

    # Set DBUS session
    set_dbus_session mate-session

    # Fetch current wallpaper
    CURRENT=$(gsettings get org.mate.background picture-filename)

    # Select new index
    make_selection "${CURRENT}"

    # Image loading
    gsettings set org.mate.background picture-filename "${LIST[${TRYSEL}]}"

elif echo "${DESKTOP}" | grep -iqF xfce
then

    # Set DBUS session
    set_dbus_session xfce4-session

    # Get properties
    XRES=($(xfconf-query --channel xfce4-desktop --list | grep last-image))

    # Loop over properties
    for this in "${XRES[@]}"
    do
        # Fetch current wallpaper
        CURRENT=$(xfconf-query --channel xfce4-desktop --property "$this")

        # Select new index
        make_selection "${CURRENT}"

        # Image loading
        xfconf-query --channel xfce4-desktop --property "$this" --set "${LIST[${TRYSELF}]}"

    done

else

    # Issue warning
    echo "Unknown desktop environment ${DESKTOP}, failed to change wallpaper"
    exit 6

fi
